---
interface Post {
    frontmatter: {
        title: string;
        pubDate: string;
        archived?: boolean;
    };
    url: string;
}

const posts = await Astro.glob("@/pages/posts/*.md");
const activePosts = posts.filter((post) => !post.frontmatter.archived);

const postsByDate = new Map();
activePosts
    .filter((post) => !post.frontmatter.archived)
    .forEach((post) => {
        const date = post.frontmatter.pubDate.split("T")[0];
        if (!postsByDate.has(date)) {
            postsByDate.set(date, []);
        }
        postsByDate.get(date).push({
            frontmatter: post.frontmatter,
            url: post.url,
        });
    });

function generateCalendarData() {
    const now = new Date();
    const year = now.getFullYear();
    const startDate = new Date(year, 0, 1);

    const weeks: { date: Date; posts: Post[] }[][] = [];
    let currentWeek: { date: Date; posts: Post[] }[] = [];
    let currentDate = new Date(startDate);

    while (currentDate.getFullYear() === year) {
        const dateStr = currentDate.toISOString().split("T")[0];

        currentWeek.push({
            date: new Date(currentDate),
            posts: postsByDate.get(dateStr) || [],
        });

        if (currentWeek.length === 7) {
            weeks.push(currentWeek);
            currentWeek = [];
        }

        currentDate.setDate(currentDate.getDate() + 1);
    }

    if (currentWeek.length > 0) {
        while (currentWeek.length < 7) {
            currentWeek.push({
                date: new Date(currentDate),
                posts: [],
            });
            currentDate.setDate(currentDate.getDate() + 1);
        }
        weeks.push(currentWeek);
    }

    return weeks;
}

const calendarData = generateCalendarData();

function getMonthLabels() {
    const months: { name: string; weekIndex: number }[] = [];
    let currentMonth = -1;

    calendarData.forEach((week, weekIndex) => {
        const monthNumber = week[0].date.getMonth();
        if (monthNumber !== currentMonth) {
            months.push({
                name: week[0].date.toLocaleString("default", {
                    month: "short",
                }),
                weekIndex,
            });
            currentMonth = monthNumber;
        }
    });

    return months;
}

const monthLabels = getMonthLabels();
---

<style>
    #calendar-tooltip {
        position: fixed; 
        z-index: 50;
        display: none;
        background-color: white;
        padding: 0.5rem;
        border-radius: 0.25rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        border: 1px solid #e2e8f0;
        pointer-events: none; 
    }

    :global(.dark) #calendar-tooltip {
        background-color: rgb(28, 25, 23); /* stone-800 */
        border-color: rgb(68, 64, 60); /* stone-700 */
        color: white;
    }
</style>

<div class="my-4">
    <div class="relative">
        <div class="flex text-sm mb-2 ml-0">
            {
                monthLabels.map((month) => (
                    <div
                        class="flex-1"
                        style={`margin-left: ${month.weekIndex === 0 ? "0" : ""}`}
                    >
                        {month.name}
                    </div>
                ))
            }
        </div>
        <div class="flex-1 flex">
            {
                calendarData.map((week) => (
                    <div class="flex-1 flex flex-col gap-1">
                        {week.map((day) => {
                            const hasPost = day.posts.length > 0;
                            return (
                                <div
                                    class={`
                    w-3 h-3 rounded-sm cursor-pointer
                    ${hasPost ? "bg-emerald-600 hover:bg-emerald-500" : "bg-stone-200 dark:bg-stone-800"}
                  `}
                                    data-date={day.date.toLocaleDateString()}
                                    data-has-posts={hasPost.toString()}
                                    data-posts={JSON.stringify(
                                        day.posts.map((post) => ({
                                            title: post.frontmatter.title,
                                            url: post.url,
                                        })),
                                    )}
                                />
                            );
                        })}
                    </div>
                ))
            }
        </div>
    </div>
</div>

<div
    id="calendar-tooltip"
    class="hidden"
>
</div>

<script>
    const tooltip = document.getElementById("calendar-tooltip");
    let currentSquare: HTMLElement | null = null;

    function updateTooltipPosition(square: HTMLElement) {
        if (!tooltip) return;
        
        const rect = square.getBoundingClientRect();
        const tooltipHeight = tooltip.offsetHeight;
        
        const spaceBelow = window.innerHeight - rect.bottom;
        const tooltipTop = spaceBelow > tooltipHeight + 8 
            ? rect.bottom + 8 
            : rect.top - tooltipHeight - 8;
            
        tooltip.style.left = `${rect.left}px`;
        tooltip.style.top = `${tooltipTop}px`;
    }

    document.querySelectorAll('[data-has-posts="true"]').forEach((square) => {
        square.addEventListener("mouseenter", (e) => {
            if (!tooltip) return;
            
            const target = e.target as HTMLElement;
            currentSquare = target;
            
            const postsData = target.getAttribute("data-posts");
            const date = target.getAttribute("data-date");
            
            if (!postsData || !date) return;
            
            const posts = JSON.parse(postsData);
            tooltip.innerHTML = `
                <div class="text-sm font-bold mb-1 text-stone-700 dark:text-stone-200">${date}</div>
                ${posts.map((post: { title: string; url: string }) => `
                    <a href="${post.url}" class="block text-sm hover:text-emerald-500 dark:hover:text-emerald-400 text-stone-700 dark:text-stone-200">
                        :: ${post.title}
                    </a>
                `).join("")}
            `;
            
            tooltip.style.display = "block";
            updateTooltipPosition(target);
        });

        square.addEventListener("mouseleave", () => {
            if (tooltip) {
                tooltip.style.display = "none";
                currentSquare = null;
            }
        });
    });

    window.addEventListener("scroll", () => {
        if (currentSquare) {
            updateTooltipPosition(currentSquare);
        }
    });

    window.addEventListener("resize", () => {
        if (currentSquare) {
            updateTooltipPosition(currentSquare);
        }
    });
</script>

<div id="post-display" class="mt-0"></div>

<script>
    const postDisplay = document.getElementById("post-display");

    document.querySelectorAll('[data-has-posts="true"]').forEach((square) => {
        square.addEventListener("click", (e) => {
            if (!postDisplay) return;

            const target = e.target as HTMLElement;
            const postsData = target.getAttribute("data-posts");
            const date = target.getAttribute("data-date");

            if (!postsData || !date) return;
            const posts = JSON.parse(postsData);
            postDisplay.innerHTML = `
          <div class="text-xl font-bold mb-1">${date}</div>
          ${posts
              .map(
                  (post: { title: string; url: string }) => `
          <a href="${post.url}" class="block text-sm hover:text-emerald-500 dark:hover:text-emerald-400">
            :: ${post.title}
          </a>
        `,
              )
              .join("")}
      `;
        });
    });
</script>
